
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSIMBOLO_SUMASIMBOLO_RESTAleftSIMBOLO_MULTIPLICACIONSIMBOLO_DIVICIONrightNEGATIVODATO_TIPO_FLOAT64 DATO_TIPO_INT64 DATO_TIPO_STRING DER_PARENTESIS ID IZQ_PARENTESIS PUNTO_COMA SIMBOLO_DIVICION SIMBOLO_IGUAL SIMBOLO_MULTIPLICACION SIMBOLO_RESTA SIMBOLO_SUMA TABULADORinit   : instruccionesinit   : instrucciones    : instruccioninstrucciones    : instruccion instruccionesinstruccion  : expresion PUNTO_COMAexpresion    : expresion SIMBOLO_SUMA expresion\n                    | expresion SIMBOLO_RESTA expresion\n                    | expresion SIMBOLO_DIVICION expresion\n                    | expresion SIMBOLO_MULTIPLICACION expresionexpresion  : IZQ_PARENTESIS expresion DER_PARENTESISexpresion  : SIMBOLO_RESTA expresion %prec NEGATIVOexpresion    : DATO_TIPO_FLOAT64\n                    | DATO_TIPO_INT64\n                    | DATO_TIPO_STRING'
    
_lr_action_items = {'$end':([0,1,2,3,10,11,],[-2,0,-1,-3,-4,-5,]),'IZQ_PARENTESIS':([0,3,5,6,11,12,13,14,15,],[6,6,6,6,-5,6,6,6,6,]),'SIMBOLO_RESTA':([0,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,],[5,5,13,5,5,-12,-13,-14,-5,5,5,5,5,-11,13,-6,-7,-8,-9,-10,]),'DATO_TIPO_FLOAT64':([0,3,5,6,11,12,13,14,15,],[7,7,7,7,-5,7,7,7,7,]),'DATO_TIPO_INT64':([0,3,5,6,11,12,13,14,15,],[8,8,8,8,-5,8,8,8,8,]),'DATO_TIPO_STRING':([0,3,5,6,11,12,13,14,15,],[9,9,9,9,-5,9,9,9,9,]),'PUNTO_COMA':([4,7,8,9,16,18,19,20,21,22,],[11,-12,-13,-14,-11,-6,-7,-8,-9,-10,]),'SIMBOLO_SUMA':([4,7,8,9,16,17,18,19,20,21,22,],[12,-12,-13,-14,-11,12,-6,-7,-8,-9,-10,]),'SIMBOLO_DIVICION':([4,7,8,9,16,17,18,19,20,21,22,],[14,-12,-13,-14,-11,14,14,14,-8,-9,-10,]),'SIMBOLO_MULTIPLICACION':([4,7,8,9,16,17,18,19,20,21,22,],[15,-12,-13,-14,-11,15,15,15,-8,-9,-10,]),'DER_PARENTESIS':([7,8,9,16,17,18,19,20,21,22,],[-12,-13,-14,-11,22,-6,-7,-8,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,3,],[2,10,]),'instruccion':([0,3,],[3,3,]),'expresion':([0,3,5,6,12,13,14,15,],[4,4,16,17,18,19,20,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','parser.py',16),
  ('init -> <empty>','init',0,'p_vacio','parser.py',24),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_l1','parser.py',30),
  ('instrucciones -> instruccion instrucciones','instrucciones',2,'p_instrucciones_l2','parser.py',36),
  ('instruccion -> expresion PUNTO_COMA','instruccion',2,'p_instruccion','parser.py',42),
  ('expresion -> expresion SIMBOLO_SUMA expresion','expresion',3,'p_expresion_binario','parser.py',49),
  ('expresion -> expresion SIMBOLO_RESTA expresion','expresion',3,'p_expresion_binario','parser.py',50),
  ('expresion -> expresion SIMBOLO_DIVICION expresion','expresion',3,'p_expresion_binario','parser.py',51),
  ('expresion -> expresion SIMBOLO_MULTIPLICACION expresion','expresion',3,'p_expresion_binario','parser.py',52),
  ('expresion -> IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',3,'p_expresion_par','parser.py',64),
  ('expresion -> SIMBOLO_RESTA expresion','expresion',2,'p_expresion_negativo','parser.py',72),
  ('expresion -> DATO_TIPO_FLOAT64','expresion',1,'p_expresion_datos','parser.py',79),
  ('expresion -> DATO_TIPO_INT64','expresion',1,'p_expresion_datos','parser.py',80),
  ('expresion -> DATO_TIPO_STRING','expresion',1,'p_expresion_datos','parser.py',81),
]
