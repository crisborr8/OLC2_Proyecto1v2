
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initleftANDORleftMENORMAYORMENOR_IGUALMAYOR_IGUALIGUALNOIGUALleftSIMBOLO_SUMASIMBOLO_RESTAleftSIMBOLO_MULTIPLICACIONSIMBOLO_DIVICIONleftSIMBOLO_POTENCIASIMBOLO_MODrightNEGATIVOAND BOOL CHAR COMA COS DATO_TIPO_CHAR DATO_TIPO_FLOAT64 DATO_TIPO_INT64 DATO_TIPO_STRING DER_PARENTESIS ELSE END FALSE FLOAT FLOAT64 FOR FUNCION ID IF IGUAL IN INT64 IZQ_PARENTESIS LOG LOG10 LOWER MAYOR MAYOR_IGUAL MENOR MENOR_IGUAL NOIGUAL NOT NOTHING OR PARSE PRINT PRINTLN PUNTO_COMA PUNTO_PUNTO SALTO SIMBOLO_DIVICION SIMBOLO_IGUAL SIMBOLO_MOD SIMBOLO_MULTIPLICACION SIMBOLO_POTENCIA SIMBOLO_RESTA SIMBOLO_SUMA SIN SQRT STRING STRING_FUNC TABULADOR TAN TRUE TRUNC TYPEOF UPPER WHILEinstruccion  : funcion_exp\n                    | funcion_exp_paraminstruccion  : condicioninit   : instruccioninstruccion  : contenidocondicion    : expresion MENOR expresion\n                    | expresion MAYOR expresion\n                    | expresion IGUAL expresion\n                    | expresion NOIGUAL expresion\n                    | expresion MENOR_IGUAL expresion\n                    | expresion MAYOR_IGUAL expresionfuncion_exp    :  dato_id IZQ_PARENTESIS DER_PARENTESIScontenido   : expresionexpresion    : IZQ_PARENTESIS expresion DER_PARENTESIScontenido   : expresion COMA contenidoexpresion    : expresion SIMBOLO_SUMA expresion\n                    | expresion SIMBOLO_RESTA expresion\n                    | expresion SIMBOLO_DIVICION expresion\n                    | expresion SIMBOLO_MULTIPLICACION expresion\n                    | expresion SIMBOLO_POTENCIA expresion\n                    | expresion SIMBOLO_MOD expresionfuncion_exp_param    :  dato_id IZQ_PARENTESIS parametros DER_PARENTESIScondicion    : condicion OR condicion\n                    | condicion AND condicionparametros   : expresionexpresion    : LOG IZQ_PARENTESIS expresion COMA expresion DER_PARENTESIS\n                    | TRUNC IZQ_PARENTESIS tipo COMA expresion DER_PARENTESIS\n                    | PARSE IZQ_PARENTESIS tipo COMA expresion DER_PARENTESISparametros   : expresion COMA parametroscondicion    : NOT condiciontipo     : INT64\n                | FLOAT64\n                | NOTHING\n                | STRING\n                | CHAR\n                | BOOLcondicion    : IZQ_PARENTESIS condicion DER_PARENTESISexpresion    : LOG10 IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | SIN IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | COS IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | TAN IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | SQRT IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | UPPER IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | LOWER IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | STRING_FUNC IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | TYPEOF IZQ_PARENTESIS expresion DER_PARENTESIS\n                    | FLOAT IZQ_PARENTESIS expresion DER_PARENTESISexpresion    : dato_numerico\n                    | expresion_id\n                    | dato_booleanoexpresion  : SIMBOLO_RESTA expresion %prec NEGATIVOdato_booleano    : TRUE\n                        | FALSEdato_numerico    : DATO_TIPO_FLOAT64\n                        | DATO_TIPO_INT64dato_numerico    : DATO_TIPO_STRING\n                        | DATO_TIPO_CHARexpresion_id    : dato_iddato_id    : ID'
    
_lr_action_items = {'NOT':([0,8,10,35,36,],[10,10,10,10,10,]),'IZQ_PARENTESIS':([0,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[8,37,8,8,-59,57,58,59,60,61,62,63,64,65,66,67,68,69,70,8,8,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ID':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'LOG':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'TRUNC':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'PARSE':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'LOG10':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'SIN':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'COS':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'TAN':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'SQRT':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'UPPER':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'LOWER':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'STRING_FUNC':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'TYPEOF':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'FLOAT':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'SIMBOLO_RESTA':([0,7,8,9,10,11,12,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,61,62,63,64,65,66,67,68,69,70,75,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,],[12,-58,12,49,12,-59,12,-48,-49,-50,-54,-55,-56,-57,-52,-53,12,12,12,49,-58,12,12,12,12,12,12,12,12,12,12,12,12,12,49,-51,12,12,12,12,12,12,12,12,12,12,12,12,49,-14,49,49,49,49,49,49,49,-16,-17,-18,-19,-20,-21,49,49,49,49,49,49,49,49,49,49,49,49,12,12,12,12,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,49,49,49,-26,-27,-28,]),'DATO_TIPO_FLOAT64':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'DATO_TIPO_INT64':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'DATO_TIPO_STRING':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'DATO_TIPO_CHAR':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'TRUE':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'FALSE':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'$end':([1,2,3,4,5,6,7,9,11,26,27,28,29,30,31,32,33,34,40,54,56,71,72,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,112,117,118,119,120,121,122,123,124,125,126,131,132,133,],[0,-4,-1,-2,-3,-5,-58,-13,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,-58,-30,-51,-23,-24,-12,-37,-14,-6,-7,-8,-9,-10,-11,-13,-15,-16,-17,-18,-19,-20,-21,-22,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'OR':([5,11,26,27,28,29,30,31,32,33,34,38,40,54,56,71,72,76,77,78,79,80,81,82,83,86,87,88,89,90,91,117,118,119,120,121,122,123,124,125,126,131,132,133,],[35,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,35,-58,35,-51,-23,-24,-37,-14,-6,-7,-8,-9,-10,-11,-16,-17,-18,-19,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'AND':([5,11,26,27,28,29,30,31,32,33,34,38,40,54,56,71,72,76,77,78,79,80,81,82,83,86,87,88,89,90,91,117,118,119,120,121,122,123,124,125,126,131,132,133,],[36,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,36,-58,36,-51,-23,-24,-37,-14,-6,-7,-8,-9,-10,-11,-16,-17,-18,-19,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'MENOR':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,77,86,87,88,89,90,91,117,118,119,120,121,122,123,124,125,126,131,132,133,],[-58,41,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,41,-58,41,-51,-14,-16,-17,-18,-19,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'MAYOR':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,77,86,87,88,89,90,91,117,118,119,120,121,122,123,124,125,126,131,132,133,],[-58,42,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,42,-58,42,-51,-14,-16,-17,-18,-19,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'IGUAL':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,77,86,87,88,89,90,91,117,118,119,120,121,122,123,124,125,126,131,132,133,],[-58,43,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,43,-58,43,-51,-14,-16,-17,-18,-19,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'NOIGUAL':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,77,86,87,88,89,90,91,117,118,119,120,121,122,123,124,125,126,131,132,133,],[-58,44,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,44,-58,44,-51,-14,-16,-17,-18,-19,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'MENOR_IGUAL':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,77,86,87,88,89,90,91,117,118,119,120,121,122,123,124,125,126,131,132,133,],[-58,45,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,45,-58,45,-51,-14,-16,-17,-18,-19,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'MAYOR_IGUAL':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,77,86,87,88,89,90,91,117,118,119,120,121,122,123,124,125,126,131,132,133,],[-58,46,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,46,-58,46,-51,-14,-16,-17,-18,-19,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'COMA':([7,9,11,26,27,28,29,30,31,32,33,34,40,56,75,77,84,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,117,118,119,120,121,122,123,124,125,126,131,132,133,],[-58,47,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,-58,-51,113,-14,47,-16,-17,-18,-19,-20,-21,114,115,-31,-32,-33,-34,-35,-36,116,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-26,-27,-28,]),'SIMBOLO_SUMA':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,75,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,102,103,104,105,106,107,108,109,110,111,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,],[-58,48,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,48,-58,48,-51,48,-14,48,48,48,48,48,48,48,-16,-17,-18,-19,-20,-21,48,48,48,48,48,48,48,48,48,48,48,48,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,48,48,48,-26,-27,-28,]),'SIMBOLO_DIVICION':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,75,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,102,103,104,105,106,107,108,109,110,111,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,],[-58,50,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,50,-58,50,-51,50,-14,50,50,50,50,50,50,50,50,50,-18,-19,-20,-21,50,50,50,50,50,50,50,50,50,50,50,50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,50,50,50,-26,-27,-28,]),'SIMBOLO_MULTIPLICACION':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,75,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,102,103,104,105,106,107,108,109,110,111,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,],[-58,51,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,51,-58,51,-51,51,-14,51,51,51,51,51,51,51,51,51,-18,-19,-20,-21,51,51,51,51,51,51,51,51,51,51,51,51,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,51,51,51,-26,-27,-28,]),'SIMBOLO_POTENCIA':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,75,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,102,103,104,105,106,107,108,109,110,111,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,],[-58,52,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,52,-58,52,-51,52,-14,52,52,52,52,52,52,52,52,52,52,52,-20,-21,52,52,52,52,52,52,52,52,52,52,52,52,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,52,52,52,-26,-27,-28,]),'SIMBOLO_MOD':([7,9,11,26,27,28,29,30,31,32,33,34,39,40,55,56,75,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,102,103,104,105,106,107,108,109,110,111,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,],[-58,53,-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,53,-58,53,-51,53,-14,53,53,53,53,53,53,53,53,53,53,53,-20,-21,53,53,53,53,53,53,53,53,53,53,53,53,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,53,53,53,-26,-27,-28,]),'DER_PARENTESIS':([11,26,27,28,29,30,31,32,33,34,37,38,39,40,54,56,71,72,74,75,76,77,78,79,80,81,82,83,86,87,88,89,90,91,92,102,103,104,105,106,107,108,109,110,111,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,],[-59,-48,-49,-50,-54,-55,-56,-57,-52,-53,73,76,77,-58,-30,-51,-23,-24,112,-25,-37,-14,-6,-7,-8,-9,-10,-11,-16,-17,-18,-19,-20,-21,77,117,118,119,120,121,122,123,124,125,126,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-29,131,132,133,-26,-27,-28,]),'INT64':([59,60,],[95,95,]),'FLOAT64':([59,60,],[96,96,]),'NOTHING':([59,60,],[97,97,]),'STRING':([59,60,],[98,98,]),'CHAR':([59,60,],[99,99,]),'BOOL':([59,60,],[100,100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instruccion':([0,],[2,]),'funcion_exp':([0,],[3,]),'funcion_exp_param':([0,],[4,]),'condicion':([0,8,10,35,36,],[5,38,54,71,72,]),'contenido':([0,47,],[6,85,]),'dato_id':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[7,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'expresion':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[9,39,55,56,55,55,75,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,102,103,104,105,106,107,108,109,110,111,75,128,129,130,]),'dato_numerico':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'expresion_id':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'dato_booleano':([0,8,10,12,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,70,113,114,115,116,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'parametros':([37,113,],[74,127,]),'tipo':([59,60,],[94,101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('instruccion -> funcion_exp','instruccion',1,'p_instruccion_funcion','funcion.py',6),
  ('instruccion -> funcion_exp_param','instruccion',1,'p_instruccion_funcion','funcion.py',7),
  ('instruccion -> condicion','instruccion',1,'p_instruccion_condicion','condicion.py',7),
  ('init -> instruccion','init',1,'p_init','init.py',7),
  ('instruccion -> contenido','instruccion',1,'p_instruccion_expresion','print.py',7),
  ('condicion -> expresion MENOR expresion','condicion',3,'p_condicion_arit','condicion.py',13),
  ('condicion -> expresion MAYOR expresion','condicion',3,'p_condicion_arit','condicion.py',14),
  ('condicion -> expresion IGUAL expresion','condicion',3,'p_condicion_arit','condicion.py',15),
  ('condicion -> expresion NOIGUAL expresion','condicion',3,'p_condicion_arit','condicion.py',16),
  ('condicion -> expresion MENOR_IGUAL expresion','condicion',3,'p_condicion_arit','condicion.py',17),
  ('condicion -> expresion MAYOR_IGUAL expresion','condicion',3,'p_condicion_arit','condicion.py',18),
  ('funcion_exp -> dato_id IZQ_PARENTESIS DER_PARENTESIS','funcion_exp',3,'p_funcion_dato','funcion.py',13),
  ('contenido -> expresion','contenido',1,'p_imprimir_contenido','print.py',13),
  ('expresion -> IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',3,'p_expresion_par','expresion.py',14),
  ('contenido -> expresion COMA contenido','contenido',3,'p_imprimir_contenido_coma','print.py',19),
  ('expresion -> expresion SIMBOLO_SUMA expresion','expresion',3,'p_expresion_binario','expresion.py',20),
  ('expresion -> expresion SIMBOLO_RESTA expresion','expresion',3,'p_expresion_binario','expresion.py',21),
  ('expresion -> expresion SIMBOLO_DIVICION expresion','expresion',3,'p_expresion_binario','expresion.py',22),
  ('expresion -> expresion SIMBOLO_MULTIPLICACION expresion','expresion',3,'p_expresion_binario','expresion.py',23),
  ('expresion -> expresion SIMBOLO_POTENCIA expresion','expresion',3,'p_expresion_binario','expresion.py',24),
  ('expresion -> expresion SIMBOLO_MOD expresion','expresion',3,'p_expresion_binario','expresion.py',25),
  ('funcion_exp_param -> dato_id IZQ_PARENTESIS parametros DER_PARENTESIS','funcion_exp_param',4,'p_funcion_dato_param','funcion.py',22),
  ('condicion -> condicion OR condicion','condicion',3,'p_condicion_logic','condicion.py',32),
  ('condicion -> condicion AND condicion','condicion',3,'p_condicion_logic','condicion.py',33),
  ('parametros -> expresion','parametros',1,'p_parametros','funcion.py',36),
  ('expresion -> LOG IZQ_PARENTESIS expresion COMA expresion DER_PARENTESIS','expresion',6,'p_expresion_nativa_binaria','expresion.py',39),
  ('expresion -> TRUNC IZQ_PARENTESIS tipo COMA expresion DER_PARENTESIS','expresion',6,'p_expresion_nativa_binaria','expresion.py',40),
  ('expresion -> PARSE IZQ_PARENTESIS tipo COMA expresion DER_PARENTESIS','expresion',6,'p_expresion_nativa_binaria','expresion.py',41),
  ('parametros -> expresion COMA parametros','parametros',3,'p_parametros_coma','funcion.py',44),
  ('condicion -> NOT condicion','condicion',2,'p_condicion_not','condicion.py',47),
  ('tipo -> INT64','tipo',1,'p_expresion_tipo','expresion.py',54),
  ('tipo -> FLOAT64','tipo',1,'p_expresion_tipo','expresion.py',55),
  ('tipo -> NOTHING','tipo',1,'p_expresion_tipo','expresion.py',56),
  ('tipo -> STRING','tipo',1,'p_expresion_tipo','expresion.py',57),
  ('tipo -> CHAR','tipo',1,'p_expresion_tipo','expresion.py',58),
  ('tipo -> BOOL','tipo',1,'p_expresion_tipo','expresion.py',59),
  ('condicion -> IZQ_PARENTESIS condicion DER_PARENTESIS','condicion',3,'p_condicion_par','condicion.py',59),
  ('expresion -> LOG10 IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',65),
  ('expresion -> SIN IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',66),
  ('expresion -> COS IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',67),
  ('expresion -> TAN IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',68),
  ('expresion -> SQRT IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',69),
  ('expresion -> UPPER IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',70),
  ('expresion -> LOWER IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',71),
  ('expresion -> STRING_FUNC IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',72),
  ('expresion -> TYPEOF IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',73),
  ('expresion -> FLOAT IZQ_PARENTESIS expresion DER_PARENTESIS','expresion',4,'p_expresion_nativa','expresion.py',74),
  ('expresion -> dato_numerico','expresion',1,'p_expresion_numerico','expresion.py',86),
  ('expresion -> expresion_id','expresion',1,'p_expresion_numerico','expresion.py',87),
  ('expresion -> dato_booleano','expresion',1,'p_expresion_numerico','expresion.py',88),
  ('expresion -> SIMBOLO_RESTA expresion','expresion',2,'p_expresion_negativo','expresion.py',93),
  ('dato_booleano -> TRUE','dato_booleano',1,'p_expresion_dato_booleano','expresion.py',105),
  ('dato_booleano -> FALSE','dato_booleano',1,'p_expresion_dato_booleano','expresion.py',106),
  ('dato_numerico -> DATO_TIPO_FLOAT64','dato_numerico',1,'p_expresion_dato_numerico','expresion.py',115),
  ('dato_numerico -> DATO_TIPO_INT64','dato_numerico',1,'p_expresion_dato_numerico','expresion.py',116),
  ('dato_numerico -> DATO_TIPO_STRING','dato_numerico',1,'p_expresion_dato_string','expresion.py',122),
  ('dato_numerico -> DATO_TIPO_CHAR','dato_numerico',1,'p_expresion_dato_string','expresion.py',123),
  ('expresion_id -> dato_id','expresion_id',1,'p_expresion_dato','expresion.py',129),
  ('dato_id -> ID','dato_id',1,'p_expresion_dato_id','expresion.py',139),
]
